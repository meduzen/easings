/**
 * RETURNS A cubic bezier TIMING FUNCTION.

 * Modern browsers will get a custom property, legacy browsers will get a
 * `cubic-bezier()` function.
 */
@function get-bezier($name, $value) {
  @if variable-exists('easings-legacy') == false or $easings-legacy == false {
    @return var(--#{$name});
  } @else {
    @return cubic-bezier($value);
  }
}

/**
 * ALIAS FOR THE CSS cubic-bezier FUNCTION
 *
 * Use:
 * `transition-timing-function: bezier(.1, .02, 1, .7);`
 */
@function bezier($args...) {
  @return #{'cubic-bezier(#{$args})'};
}

/**
 * REVERSE A cubic-bezier TIMING FUNCTION
 *
 * Use:
 * `transition-timing-function: reverse-bezier(.1, .02, 1, .7);`
 * `transition-timing-function: reverse-bezier($in-out-quad-value);`
 */
@function reverse-bezier($args...) {

  // Turn single argument into 4 arguments
  @if length($args) == 1 and length(nth($args, 1)) == 4 {
    $args: nth($args, 1);
  }

  $x1: nth($args, 1);
  $y1: nth($args, 2);
  $x2: nth($args, 3);
  $y2: nth($args, 4);

  @return #{'cubic-bezier(#{1 - $x2}, #{1 - $y2}, #{1 - $x1}, #{1 - $y1})'};
}

/**
 * ALIAS TO reverse-bezier
 */
@function r-bezier($args...) {
  @if length($args) == 1 and length(nth($args, 1)) == 4 {
    $args: nth($args, 1);
  }

  @return reverse-bezier($args);
}

